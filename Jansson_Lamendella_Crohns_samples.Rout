> setwd("/n/hutlab11_nobackup/users/syma/ibd_meta_analysis/")
> source("scripts/source.R")
Loading required package: RSQLite
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: RCurl
Loading required package: bitops
Warning: program compiled against libxml 209 using older 207
Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 2.2.1     ✔ purrr   0.2.4
✔ tibble  1.3.4     ✔ dplyr   0.7.4
✔ tidyr   0.7.2     ✔ stringr 1.2.0
✔ readr   1.1.1     ✔ forcats 0.2.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ stringr::boundary() masks graph::boundary()
✖ dplyr::combine()    masks BiocGenerics::combine()
✖ tidyr::complete()   masks RCurl::complete()
✖ tidyr::extract()    masks magrittr::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ ggplot2::Position() masks BiocGenerics::Position(), base::Position()
✖ purrr::set_names()  masks magrittr::set_names()
> study <- "Jansson_Lamendella_Crohns"
> 
> meta_raw <- read.table(paste0("raw/", study, "/metadata_raw.txt"),
+                        header = T,
+                        sep = '\t',
+                        stringsAsFactors = F,
+                        check.names = F)
> meta_raw$sample_alias <- paste0('qiita_sid_1629:', meta_raw$sample_name)
> 
> sra_con <- dbConnect(SQLite(), paste0(data.dir, "SRAdb/SRAmetadb.sqlite"))
> # sample accessions for the sequences
> sample_accesion <- sraConvert('ERP020401', sra_con = sra_con)$sample %>% unique
> # table of sample attributes
> sample_table <- dbGetQuery(sra_con, paste0("select * from sample where sample_accession in (",
+                                            sample_accesion %>% 
+                                              paste0("'", ., "'") %>% 
+                                              paste(collapse = ', '),
+                                            ")"))
> sample_common <- intersect(meta_raw$sample_alias, sample_table$sample_alias)
> meta_raw <- meta_raw %>% subset(sample_alias %in% sample_common)
> sample_table <- sample_table %>% subset(sample_alias %in% sample_common)
> meta_raw_merged <- meta_raw %>% left_join(sample_table, by = 'sample_alias')
> write.table(meta_raw_merged, file = paste0("raw/", study, "/metadata_raw_merged.txt"),
+             row.names = F,
+             quote = F,
+             sep = "\t")
> 
> # matched sample accessions
> sample_accession <- sample_table$sample_accession %>% 
+   sraConvert(sra_con = sra_con) %>% 
+   select(sample, run)
> write.table(sample_accession, 
+             file =  paste0("raw/", study, "/sample_accession.txt"),
+             row.names = F,
+             quote = FALSE,
+             sep = '\t')
> 
> # getting fastq files
> dir.create(paste0(data.dir, "fastq/", study, "/"),
+            recursive = T)
Warning message:
In dir.create(paste0(data.dir, "fastq/", study, "/"), recursive = T) :
  '/n/hutlab11_nobackup/data/ibd_meta_analysis/fastq/Jansson_Lamendella_Crohns' already exists
> # only download those that are not already present
> fastq_files <- list.files(paste0(data.dir, "fastq/", study, "/"))
> run_to_get <- fastq_files %>% 
+   gsub(".fastq.gz", "", ., fixed = T) %>% 
+   setdiff(sample_accession$run, .)
> if(length(run_to_get) > 0) getSRAfile(run_to_get, sra_con, fileType = 'fastq', 
+                                       destDir = paste0(data.dir, "fastq/", study, "/"))
> 
> proc.time()
   user  system elapsed 
  5.487   0.370   6.327 
